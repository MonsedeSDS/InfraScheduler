// <auto-generated />
using System;
using InfraScheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfraScheduler.Migrations
{
    [DbContext(typeof(InfraSchedulerContext))]
    [Migration("20250618031517_UpdateTechnicianModel")]
    partial class UpdateTechnicianModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("InfraScheduler.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityAffected")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("InfraScheduler.Models.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HoursAllocated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("InfraScheduler.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CCNA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CCNP"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("InfraScheduler.Models.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("InfraScheduler.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SiteId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlannedEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlannedStart")
                        .HasColumnType("TEXT");

                    b.Property<double>("Progress")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("JobTasks");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTaskMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("MaterialId");

                    b.ToTable("JobTaskMaterials");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTaskTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("JobTaskTechnicians");
                });

            modelBuilder.Entity("InfraScheduler.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialDeliveries");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialInventory");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaterialId1")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialId1");

                    b.ToTable("MaterialRequirements");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReservedFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservedTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("MaterialResourceId");

                    b.ToTable("MaterialReservations");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialResources");
                });

            modelBuilder.Entity("InfraScheduler.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Resources");

                    b.HasDiscriminator<string>("ResourceType").HasValue("Resource");
                });

            modelBuilder.Entity("InfraScheduler.Models.ResourceCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("ResourceCalendars");
                });

            modelBuilder.Entity("InfraScheduler.Models.ResourceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ResourceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technician"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vehicle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tool"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Budget"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technician"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.ScheduleSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("ScheduleSlots");
                });

            modelBuilder.Entity("InfraScheduler.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteOwnerId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SiteOwnerId");

                    b.HasIndex("SiteOwnerId1");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SiteOwners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cotonou, Benin",
                            CompanyName = "Prime Infrastructure & Engineering",
                            ContactPerson = "John Doe",
                            Email = "contact@primeinfra.bj",
                            Phone = "+229 12345678"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Porto-Novo, Benin",
                            CompanyName = "Benin Telecom",
                            ContactPerson = "Jane Smith",
                            Email = "contact@benintelecom.bj",
                            Phone = "+229 87654321"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteTenant", b =>
                {
                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("SiteId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("SiteTenants");
                });

            modelBuilder.Entity("InfraScheduler.Models.Subcontractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subcontractors");
                });

            modelBuilder.Entity("InfraScheduler.Models.TaskDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrerequisiteTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("PrerequisiteTaskId");

                    b.HasIndex("ParentTaskId", "PrerequisiteTaskId")
                        .IsUnique();

                    b.ToTable("TaskDependencies");
                });

            modelBuilder.Entity("InfraScheduler.Models.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Certifications")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("InfraScheduler.Models.TechnicianAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianAssignments");
                });

            modelBuilder.Entity("InfraScheduler.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InfraScheduler.Models.ActivityLog", b =>
                {
                    b.HasOne("InfraScheduler.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InfraScheduler.Models.Allocation", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Resource", null)
                        .WithMany("Allocations")
                        .HasForeignKey("ResourceId");

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany("Allocations")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.FinancialTransaction", b =>
                {
                    b.HasOne("InfraScheduler.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("InfraScheduler.Models.Job", b =>
                {
                    b.HasOne("InfraScheduler.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTask", b =>
                {
                    b.HasOne("InfraScheduler.Models.Job", "Job")
                        .WithMany("Tasks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("Job");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTaskMaterial", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTaskTechnician", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialDelivery", b =>
                {
                    b.HasOne("InfraScheduler.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialInventory", b =>
                {
                    b.HasOne("InfraScheduler.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialRequirement", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany("MaterialRequirements")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Material", null)
                        .WithMany("MaterialRequirements")
                        .HasForeignKey("MaterialId1");

                    b.Navigation("JobTask");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialReservation", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.MaterialResource", "MaterialResource")
                        .WithMany("Reservations")
                        .HasForeignKey("MaterialResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("MaterialResource");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialResource", b =>
                {
                    b.HasOne("InfraScheduler.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("InfraScheduler.Models.Resource", b =>
                {
                    b.HasOne("InfraScheduler.Models.ResourceCategory", "Category")
                        .WithMany("Resources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("InfraScheduler.Models.ResourceCalendar", b =>
                {
                    b.HasOne("InfraScheduler.Models.Resource", null)
                        .WithMany("Calendar")
                        .HasForeignKey("ResourceId");

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany("ResourceCalendars")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.ScheduleSlot", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.Site", b =>
                {
                    b.HasOne("InfraScheduler.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.SiteOwner", "SiteOwner")
                        .WithMany()
                        .HasForeignKey("SiteOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.SiteOwner", null)
                        .WithMany("Sites")
                        .HasForeignKey("SiteOwnerId1");

                    b.Navigation("Client");

                    b.Navigation("SiteOwner");
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteTenant", b =>
                {
                    b.HasOne("InfraScheduler.Models.Client", "Client")
                        .WithMany("SiteTenants")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Site", "Site")
                        .WithMany("SiteTenants")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("InfraScheduler.Models.TaskDependency", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", null)
                        .WithMany("Dependencies")
                        .HasForeignKey("JobTaskId");

                    b.HasOne("InfraScheduler.Models.JobTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.JobTask", "PrerequisiteTask")
                        .WithMany()
                        .HasForeignKey("PrerequisiteTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("PrerequisiteTask");
                });

            modelBuilder.Entity("InfraScheduler.Models.TechnicianAssignment", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.Client", b =>
                {
                    b.Navigation("SiteTenants");
                });

            modelBuilder.Entity("InfraScheduler.Models.Job", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTask", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("MaterialRequirements");
                });

            modelBuilder.Entity("InfraScheduler.Models.Material", b =>
                {
                    b.Navigation("MaterialRequirements");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialResource", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("InfraScheduler.Models.Resource", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("InfraScheduler.Models.ResourceCategory", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("InfraScheduler.Models.Site", b =>
                {
                    b.Navigation("SiteTenants");
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteOwner", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("InfraScheduler.Models.Technician", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("ResourceCalendars");
                });
#pragma warning restore 612, 618
        }
    }
}
