// <auto-generated />
using System;
using InfraScheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfraScheduler.Migrations
{
    [DbContext(typeof(InfraSchedulerContext))]
    [Migration("20250618131547_RemoveSchedulingTables")]
    partial class RemoveSchedulingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("InfraScheduler.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityAffected")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("InfraScheduler.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CCNA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CCNP"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("InfraScheduler.Models.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("InfraScheduler.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SiteId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Progress")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("JobTasks");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTaskTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("JobTaskTechnicians");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequiredFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequiredTo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.ToTable("MaterialRequirements");
                });

            modelBuilder.Entity("InfraScheduler.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technician"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteOwnerId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SiteOwnerId");

                    b.HasIndex("SiteOwnerId1");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SiteOwners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cotonou, Benin",
                            CompanyName = "Prime Infrastructure & Engineering",
                            ContactPerson = "John Doe",
                            Email = "contact@primeinfra.bj",
                            Phone = "+229 12345678"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Porto-Novo, Benin",
                            CompanyName = "Benin Telecom",
                            ContactPerson = "Jane Smith",
                            Email = "contact@benintelecom.bj",
                            Phone = "+229 87654321"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteTenant", b =>
                {
                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("SiteId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("SiteTenants");
                });

            modelBuilder.Entity("InfraScheduler.Models.Subcontractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subcontractors");
                });

            modelBuilder.Entity("InfraScheduler.Models.TaskDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrerequisiteTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("PrerequisiteTaskId");

                    b.HasIndex("ParentTaskId", "PrerequisiteTaskId")
                        .IsUnique();

                    b.ToTable("TaskDependencies");
                });

            modelBuilder.Entity("InfraScheduler.Models.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Certifications")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("InfraScheduler.Models.TechnicianAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianAssignments");
                });

            modelBuilder.Entity("InfraScheduler.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignedToJobId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignedToTechnicianId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToJobId");

                    b.HasIndex("AssignedToTechnicianId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("InfraScheduler.Models.ToolAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("ToolId");

                    b.ToTable("ToolAssignments");
                });

            modelBuilder.Entity("InfraScheduler.Models.ToolCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ToolCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electric and battery-powered tools",
                            Name = "Power Tools"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Manual tools and equipment",
                            Name = "Hand Tools"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Diagnostic and testing tools",
                            Name = "Testing Equipment"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Personal protective equipment",
                            Name = "Safety Equipment"
                        });
                });

            modelBuilder.Entity("InfraScheduler.Models.ToolMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("ToolMaintenance");
                });

            modelBuilder.Entity("InfraScheduler.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InfraScheduler.Models.ActivityLog", b =>
                {
                    b.HasOne("InfraScheduler.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InfraScheduler.Models.FinancialTransaction", b =>
                {
                    b.HasOne("InfraScheduler.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("InfraScheduler.Models.Job", b =>
                {
                    b.HasOne("InfraScheduler.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTask", b =>
                {
                    b.HasOne("InfraScheduler.Models.Job", "Job")
                        .WithMany("Tasks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("Job");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTaskTechnician", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.MaterialRequirement", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");
                });

            modelBuilder.Entity("InfraScheduler.Models.Site", b =>
                {
                    b.HasOne("InfraScheduler.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.SiteOwner", "SiteOwner")
                        .WithMany()
                        .HasForeignKey("SiteOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.SiteOwner", null)
                        .WithMany("Sites")
                        .HasForeignKey("SiteOwnerId1");

                    b.Navigation("Client");

                    b.Navigation("SiteOwner");
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteTenant", b =>
                {
                    b.HasOne("InfraScheduler.Models.Client", "Client")
                        .WithMany("SiteTenants")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Site", "Site")
                        .WithMany("SiteTenants")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("InfraScheduler.Models.TaskDependency", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", null)
                        .WithMany("Dependencies")
                        .HasForeignKey("JobTaskId");

                    b.HasOne("InfraScheduler.Models.JobTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.JobTask", "PrerequisiteTask")
                        .WithMany()
                        .HasForeignKey("PrerequisiteTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("PrerequisiteTask");
                });

            modelBuilder.Entity("InfraScheduler.Models.TechnicianAssignment", b =>
                {
                    b.HasOne("InfraScheduler.Models.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("InfraScheduler.Models.Tool", b =>
                {
                    b.HasOne("InfraScheduler.Models.Job", "AssignedToJob")
                        .WithMany()
                        .HasForeignKey("AssignedToJobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InfraScheduler.Models.Technician", "AssignedToTechnician")
                        .WithMany()
                        .HasForeignKey("AssignedToTechnicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InfraScheduler.Models.ToolCategory", "Category")
                        .WithMany("Tools")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedToJob");

                    b.Navigation("AssignedToTechnician");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("InfraScheduler.Models.ToolAssignment", b =>
                {
                    b.HasOne("InfraScheduler.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InfraScheduler.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InfraScheduler.Models.Tool", "Tool")
                        .WithMany("Assignments")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Technician");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("InfraScheduler.Models.ToolMaintenance", b =>
                {
                    b.HasOne("InfraScheduler.Models.Tool", "Tool")
                        .WithMany("MaintenanceHistory")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("InfraScheduler.Models.Client", b =>
                {
                    b.Navigation("SiteTenants");
                });

            modelBuilder.Entity("InfraScheduler.Models.Job", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("InfraScheduler.Models.JobTask", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("InfraScheduler.Models.Site", b =>
                {
                    b.Navigation("SiteTenants");
                });

            modelBuilder.Entity("InfraScheduler.Models.SiteOwner", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("InfraScheduler.Models.Tool", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("MaintenanceHistory");
                });

            modelBuilder.Entity("InfraScheduler.Models.ToolCategory", b =>
                {
                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
